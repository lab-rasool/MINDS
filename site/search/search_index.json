{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reference download ( cohort , output_dir , threads = 4 ) Download the files for a given cohort Parameters cohort : dataframe A df containing unique case_ids and their case_submitter_ids for a query output_dir : str The directory where the files should be downloaded Returns None Source code in app\\minds\\__init__.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def download ( cohort , output_dir , threads = 4 ): \"\"\"Download the files for a given cohort Parameters ---------- cohort : dataframe A df containing unique case_ids and their case_submitter_ids for a query output_dir : str The directory where the files should be downloaded Returns ------- None \"\"\" MAX_WORKERS = threads case_ids = cohort . index . tolist () case_submitter_ids = cohort . values . tolist () gdc_download = GDCFileDownloader ( output_dir , MAX_WORKERS = MAX_WORKERS , ) gdc_download . process_cases ( case_ids = case_ids , case_submitter_ids = case_submitter_ids , ) post_processor = PostProcessor ( output_dir , case_ids , case_submitter_ids ) post_processor . rename_files () # idc_download = IDCFileDownloader(output_dir) # idc_download.process_cases(case_submitter_ids=case_submitter_ids) tcia_download = TCIAFileDownloader ( output_dir , MAX_WORKERS = MAX_WORKERS , ) tcia_download . process_cases ( case_submitter_ids = case_submitter_ids ) post_processor . generate_manifest () get_cohort ( query ) Query the database and return the case ids and case_submitter_ids as two lists Parameters query_string : str The query string to be executed on the database Returns dataframe A df containing unique case_ids and their case_submitter_ids for a query Source code in app\\minds\\__init__.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_cohort ( query ): \"\"\"Query the database and return the case ids and case_submitter_ids as two lists Parameters ---------- query_string : str The query string to be executed on the database Returns ------- dataframe A df containing unique case_ids and their case_submitter_ids for a query \"\"\" return db . get_cohort ( query ) get_columns ( table ) Get the list of columns in a table Parameters table : str The name of the table Returns list A list of columns in the table Source code in app\\minds\\__init__.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_columns ( table ): \"\"\"Get the list of columns in a table Parameters ---------- table : str The name of the table Returns ------- list A list of columns in the table \"\"\" return db . get_columns ( table ) get_tables () Get the list of tables in the database Returns list A list of tables in the database Source code in app\\minds\\__init__.py 13 14 15 16 17 18 19 20 21 def get_tables (): \"\"\"Get the list of tables in the database Returns ------- list A list of tables in the database \"\"\" return db . get_tables () query ( query ) Query the database and return the result as a pandas dataframe Parameters query_string : str The query string to be executed on the database Returns pandas.DataFrame The result of the query Source code in app\\minds\\__init__.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def query ( query ): \"\"\"Query the database and return the result as a pandas dataframe Parameters ---------- query_string : str The query string to be executed on the database Returns ------- pandas.DataFrame The result of the query \"\"\" return db . execute ( query )","title":"Home"},{"location":"#reference","text":"","title":"Reference"},{"location":"#app.minds.download","text":"Download the files for a given cohort","title":"download"},{"location":"#app.minds.download--parameters","text":"cohort : dataframe A df containing unique case_ids and their case_submitter_ids for a query output_dir : str The directory where the files should be downloaded","title":"Parameters"},{"location":"#app.minds.download--returns","text":"None Source code in app\\minds\\__init__.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def download ( cohort , output_dir , threads = 4 ): \"\"\"Download the files for a given cohort Parameters ---------- cohort : dataframe A df containing unique case_ids and their case_submitter_ids for a query output_dir : str The directory where the files should be downloaded Returns ------- None \"\"\" MAX_WORKERS = threads case_ids = cohort . index . tolist () case_submitter_ids = cohort . values . tolist () gdc_download = GDCFileDownloader ( output_dir , MAX_WORKERS = MAX_WORKERS , ) gdc_download . process_cases ( case_ids = case_ids , case_submitter_ids = case_submitter_ids , ) post_processor = PostProcessor ( output_dir , case_ids , case_submitter_ids ) post_processor . rename_files () # idc_download = IDCFileDownloader(output_dir) # idc_download.process_cases(case_submitter_ids=case_submitter_ids) tcia_download = TCIAFileDownloader ( output_dir , MAX_WORKERS = MAX_WORKERS , ) tcia_download . process_cases ( case_submitter_ids = case_submitter_ids ) post_processor . generate_manifest ()","title":"Returns"},{"location":"#app.minds.get_cohort","text":"Query the database and return the case ids and case_submitter_ids as two lists","title":"get_cohort"},{"location":"#app.minds.get_cohort--parameters","text":"query_string : str The query string to be executed on the database","title":"Parameters"},{"location":"#app.minds.get_cohort--returns","text":"dataframe A df containing unique case_ids and their case_submitter_ids for a query Source code in app\\minds\\__init__.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_cohort ( query ): \"\"\"Query the database and return the case ids and case_submitter_ids as two lists Parameters ---------- query_string : str The query string to be executed on the database Returns ------- dataframe A df containing unique case_ids and their case_submitter_ids for a query \"\"\" return db . get_cohort ( query )","title":"Returns"},{"location":"#app.minds.get_columns","text":"Get the list of columns in a table","title":"get_columns"},{"location":"#app.minds.get_columns--parameters","text":"table : str The name of the table","title":"Parameters"},{"location":"#app.minds.get_columns--returns","text":"list A list of columns in the table Source code in app\\minds\\__init__.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_columns ( table ): \"\"\"Get the list of columns in a table Parameters ---------- table : str The name of the table Returns ------- list A list of columns in the table \"\"\" return db . get_columns ( table )","title":"Returns"},{"location":"#app.minds.get_tables","text":"Get the list of tables in the database","title":"get_tables"},{"location":"#app.minds.get_tables--returns","text":"list A list of tables in the database Source code in app\\minds\\__init__.py 13 14 15 16 17 18 19 20 21 def get_tables (): \"\"\"Get the list of tables in the database Returns ------- list A list of tables in the database \"\"\" return db . get_tables ()","title":"Returns"},{"location":"#app.minds.query","text":"Query the database and return the result as a pandas dataframe","title":"query"},{"location":"#app.minds.query--parameters","text":"query_string : str The query string to be executed on the database","title":"Parameters"},{"location":"#app.minds.query--returns","text":"pandas.DataFrame The result of the query Source code in app\\minds\\__init__.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def query ( query ): \"\"\"Query the database and return the result as a pandas dataframe Parameters ---------- query_string : str The query string to be executed on the database Returns ------- pandas.DataFrame The result of the query \"\"\" return db . execute ( query )","title":"Returns"}]}